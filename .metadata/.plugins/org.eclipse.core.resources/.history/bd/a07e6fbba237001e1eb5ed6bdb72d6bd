package com.OrangeHRM;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.Test;

public class OHRMValidateMultipleFunctionalitiesAndPages extends BaseTest {
	
	
	
	FileInputStream addEmployeeFile;
	XSSFWorkbook addEmployeeWorkBook;
	XSSFSheet addDataSheet;
	XSSFRow row;
	FileOutputStream outputFile;
	
	int rowCount;
	int rowOfCellCount;
	
	FileInputStream propertiesFile;
	Properties properties;
	
	By userNameElementProperty;
	WebElement userNameElement;
	By passwordElementProperty;
	WebElement passwordElement;
	By buttonElementProperty;
	WebElement buttonElement;
	
	By welcomeAdminElementProperty;
	WebElement welcomeAdminElement;

	By addEmployeeHeadingElementProperty;
	By addEmployeeHeadingElementLocator;
	WebElement addEmployeeHeadingElement;
	WebElement addEmployeeHeading;
	String autoGeneratedId;
	
	String sheetFirstName;
	String sheetMiddleName;
	String sheetLastName;
				
			@Test(priority=1,description="Validating OrangeHRM Login Page")
		    public void loginPageTest() throws IOException {
			
				
				//identify the properties file
				
				propertiesFile = new FileInputStream("./src/com/PropertiesFiles/OHRMPropertyFile.properties");
				
				//creating an object for properties class
				
				properties = new Properties();
				
				//loading the properties of file - using properties class object(properties)
				
				properties.load(propertiesFile);
				
	    //identifying the excel file
	    addEmployeeFile = new FileInputStream("./src/com/OHRMAddEmployeeDataFiles/MultipleFunctionalityAndPagesTestSheet.xlsx");
	    
	    //identify the workbook in the the file
	    addEmployeeWorkBook = new XSSFWorkbook(addEmployeeFile);
	    
	    // identify the sheet in the workbook
	    addDataSheet = addEmployeeWorkBook.getSheet("Sheet1");
	    
	    
	    //in the sheet identify number of active rows
	    rowCount = addDataSheet.getLastRowNum();
	    System.out.println(rowCount);
	    
	    row = addDataSheet.getRow(1);
	    
	    for(int rowOfCellIndex=0;rowOfCellIndex<3;rowOfCellIndex++) {
	    	  
	     String expectedLoginPanelHeading = row.getCell(rowOfCellIndex).getStringCellValue();
	     
	   //identifying the path to save the file
			outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
			addEmployeeWorkBook.write(outputFile);
	     
	     System.out.println(expectedLoginPanelHeading);
	     
	     rowOfCellIndex++;
	     
	     //<div id="logInPanelHeading">LOGIN Panel</div>
	     By loginPanelHeadingProperty = By.id(properties.getProperty("loginWebPageLoginPanelElementProperty"));
	 	
		 WebElement  loginPanelHeadingElement = driver.findElement(loginPanelHeadingProperty);
		   
		 String actual_LoginPanelHeadingText = loginPanelHeadingElement.getText();
		 
		 row.createCell(rowOfCellIndex).setCellValue(actual_LoginPanelHeadingText);
		 
		 outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
			
		 addEmployeeWorkBook.write(outputFile);
		 
		 rowOfCellIndex++;
		   
		 System.out.println("The actual Login Panel Heading Text is :- "+actual_LoginPanelHeadingText);
			
			//saving the operations perfomed on the workbook
		    
		   
		 if(actual_LoginPanelHeadingText.equals(expectedLoginPanelHeading)) {
			   
			   System.out.println("The expected Login panel Heading Text matches - PASS");
			   
			   row.createCell(rowOfCellIndex).setCellValue("The expected Login panel Heading Text matches - PASS");
			   
			   outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
				
			   addEmployeeWorkBook.write(outputFile);   
		   }
		   
		 else {
			   
			   System.out.println("The expected Login panel Heading Text does not match - FAIL");
			   
			   row.createCell(rowOfCellIndex).setCellValue("The expected Login panel Heading Text does not match - FAIL");
			   
			   outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
				
			   addEmployeeWorkBook.write(outputFile);
		 }
	     
	    }

	}
			@Test(priority=2,description="Login with Invalid Test Data")
			public void invalidLoginTest() throws IOException {
				
				for(int rowOfCellIndex=3;rowOfCellIndex<8;rowOfCellIndex++)
				{
					
					String invalidUser = "rah!@#j";
					String invalidPassword = "rag%$$kk";
			// going to an active row
					
					row.createCell(rowOfCellIndex).setCellValue(invalidUser);
				
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					   
					String userName = row.getCell(rowOfCellIndex).getStringCellValue();
					
					rowOfCellIndex++;
					
					
					row.createCell(rowOfCellIndex).setCellValue(invalidPassword);
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					String userPassword = row.getCell(rowOfCellIndex).getStringCellValue();
				
					 rowOfCellIndex++;
					  

					//identifying userName element 
					    userNameElementProperty = By.id(properties.getProperty("loginWebPageUserNameProperty"));
						
					    //finding userName element 
						userNameElement = driver.findElement(userNameElementProperty);
						
						//sending the keys to user name element
						//storing the user name into a variable
						
						userNameElement.sendKeys(userName);
						
						//<input name="txtPassword" id="txtPassword" autocomplete="off" type="password">
						
						//locator/attribute - name
						//selector/value - txtPassword
						
						//identifying password element
					    passwordElementProperty = By.name(properties.getProperty("loginWebPagePasswordProperty"));
						
					    //finding password element
						passwordElement = driver.findElement(passwordElementProperty);
						
						//sending the keys to password element
						//storing the password into a variable
						//sending the keys through a variable to password element text box
						passwordElement.sendKeys(userPassword);

						//<input type="submit" name="Submit" class="button" id="btnLogin" value="LOGIN">
						//locator/attribute - className
						//selector/value - button
						
						//identifying button element
					    buttonElementProperty = By.className(properties.getProperty("loginWebPageLoginButtonProperty"));
						
					    //finding button element
						buttonElement = driver.findElement(buttonElementProperty);
						
						//performing click operation on button element 
						buttonElement.click();
					   
					 String expectedErrorMessage = row.getCell(rowOfCellIndex).getStringCellValue();
					 
					 outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
										 
					 System.out.println(expectedErrorMessage);
					 
					 rowOfCellIndex++;
					 
					 //<span id="spanMessage">Invalid credentials</span>
					 //identifying error message element by property
					 
					 By errorMessageElementProperty = By.id(properties.getProperty("loginWebPageLoginPageErrorMessageProperty"));
					 
					 //finding error message element
					 WebElement errorMessageElement = driver.findElement(errorMessageElementProperty);
					 
					 //storing the text present in error message element ino a variable
					 String actualErrorMessage = errorMessageElement.getText();
					 
					 System.out.println("The Login Page actual Error Message is: "+actualErrorMessage);
					 
					 row.createCell(rowOfCellIndex).setCellValue(actualErrorMessage);
					 
					 outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
					 addEmployeeWorkBook.write(outputFile);
						
					 rowOfCellIndex++;
					 
					 if(actualErrorMessage.equals(expectedErrorMessage)) {
						 System.out.println("actual error message matches");
						 
						 row.createCell(rowOfCellIndex).setCellValue("actual error message matches-PASS");
						 
						 outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);
					 }
					 
					 else {
						 System.out.println("expected error message doesn't match "+actualErrorMessage);
						 
                         row.createCell(rowOfCellIndex).setCellValue("actual error message doesn't match-FAIL");
						 
						 outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
							addEmployeeWorkBook.write(outputFile);
					 }
					 rowOfCellIndex++;
					 
				}
			}
			
			@Test(priority=3,description="Validate Home Page")
			public void validateHomePageTest() throws IOException {
				
				for(int rowOfCellIndex=8;rowOfCellIndex<14;rowOfCellIndex++) {
					
					//storing the actual user name and password into variables
					
					String actual_UserName = "rahulsoni";
					
					String actual_Password = "Rahul@1995";
					
					//identifying userName element 
				    userNameElementProperty = By.id(properties.getProperty("loginWebPageUserNameProperty"));
					
				    //finding userName element 
					userNameElement = driver.findElement(userNameElementProperty);
					
					userNameElement.sendKeys(actual_UserName);
					
					//identifying password element
				    passwordElementProperty = By.name(properties.getProperty("loginWebPagePasswordProperty"));
					
				    //finding password element
					passwordElement = driver.findElement(passwordElementProperty);
					
					passwordElement.sendKeys(actual_Password);
					
					//identifying button element
				    buttonElementProperty = By.className(properties.getProperty("loginWebPageLoginButtonProperty"));
					
				    //finding button element
					buttonElement = driver.findElement(buttonElementProperty);
					
					buttonElement.click();
				
					String expectedHomePageWelcomeText = row.getCell(rowOfCellIndex).getStringCellValue();
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					rowOfCellIndex++;
					
					//finding the save button element using id
				    welcomeAdminElementProperty = By.id(properties.getProperty("loginWebPageWelcomeAdminElementProperty"));
					
				    //finding the welcome admin element by id
					welcomeAdminElement = driver.findElement(welcomeAdminElementProperty);
					
					String actualHomePageWelcomeText = welcomeAdminElement.getText();
					
					row.createCell(rowOfCellIndex).setCellValue(actualHomePageWelcomeText);
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					rowOfCellIndex++;
					
					if(actualHomePageWelcomeText.contains(expectedHomePageWelcomeText)) {
						
						System.out.println("The expected welcome text exists "+actualHomePageWelcomeText);
						
						row.createCell(rowOfCellIndex).setCellValue("The expected welcome text exists-PASS");
						
						outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
						
					}
					
					else {
						
                        System.out.println("The expected welcome text doesn't exist "+actualHomePageWelcomeText);
						
						row.createCell(rowOfCellIndex).setCellValue("The expected welcome text exists-FAIL");
						
						outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
						
					}
				
					rowOfCellIndex++;
					
					// <b>PIM</b>
					//identifying link element "PIM"
					By pimElementProperty = By.linkText(properties.getProperty("loginWebPagePIMElementProperty"));
					
					//finding link  element PIM
					WebElement pimElement = driver.findElement(pimElementProperty);
					
					//no need to perform click operation we wil use action class
					//performing click operation on link element PIM
					//pimElement.click();
					
					//Action class is used to perform both mouse and keyboard related key operations
					Actions action = new Actions(driver);
					
					action.moveToElement(pimElement).build().perform();
					
					//<a href="/OrangeHrm-4.2.0.1/symfony/web/index.php/pim/addEmployee" id="menu_pim_addEmployee">Add Employee</a>
					
					//identifying link element "Add Employee"
					By addEmployeeElementproperty = By.linkText(properties.getProperty("loginWebPageAddEmployeeElementProperty"));
					
					//finding link element "Add Employee"
					WebElement addEmployeeElement = driver.findElement(addEmployeeElementproperty);
					
					//performing click operation on link element "Add Employee"
					addEmployeeElement.click();
					
                    String expectedAddEmployeePageText = row.getCell(rowOfCellIndex).getStringCellValue();
                    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					System.out.println(expectedAddEmployeePageText);
					
					rowOfCellIndex++;
					
					//identifying the add Employee Heading by xpath property       -       /html/body/div[1]/div[3]/div/div[1]/h1
					
                    By addEmployeeHeadingProperty = By.xpath(properties.getProperty("addEmployeePageAddEmployeeHeading"));
				    
					WebElement addEmployeeHeading = driver.findElement(addEmployeeHeadingProperty);
					
					String actualAddEmployeePageText = addEmployeeHeading.getText();
					
					row.createCell(rowOfCellIndex).setCellValue(actualAddEmployeePageText);
				    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					rowOfCellIndex++;
					
					if(actualAddEmployeePageText.contains(expectedAddEmployeePageText))
					{
						System.out.println("The expected add Employee Page Text exists");
						
						row.createCell(rowOfCellIndex).setCellValue("The expected add Employee Page Text exist-PASS");
					    
	                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
					}
					else {
						
                        System.out.println("The expected add Employee Page Text doesn't exist");
						
						row.createCell(rowOfCellIndex).setCellValue("The expected add Employee Page Text doesn't exist-FAIL");
					    
	                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
					}
					rowOfCellIndex++;
				}
				 	
			}
			
			@Test(priority=4,description="Add Employee Functionality Test ")
			public void addEmloyeeTest() throws IOException {
				
				for(int rowOfCellIndex=14;rowOfCellIndex<17;rowOfCellIndex++) {
					
					
					//sending the first middle last name data to excel sheet
					String firstNameInput = "Rahul";
					
					String middleNameInput = "Kumar";
					
					String lastNameInput = "Soni";
					
					row.createCell(rowOfCellIndex).setCellValue(firstNameInput);
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					sheetFirstName = row.getCell(rowOfCellIndex).getStringCellValue();
					
					rowOfCellIndex++;
					
                    row.createCell(rowOfCellIndex).setCellValue(middleNameInput);
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					sheetMiddleName = row.getCell(rowOfCellIndex).getStringCellValue();
					
					rowOfCellIndex++;
					
                    row.createCell(rowOfCellIndex).setCellValue(lastNameInput);
					
					outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
					sheetLastName = row.getCell(rowOfCellIndex).getStringCellValue();
					
					rowOfCellIndex++;
					
					By employeeIdElementProperty = By.id(properties.getProperty("loginWebPageEmployeeIdElementProperty"));
				    
				    //identifying employeeId text box element
				    WebElement autoGeneratedIdElement = driver.findElement(employeeIdElementProperty);
				    
				    //finding(autogenerated Id) the value stored in employeeId text box element
				    autoGeneratedId = autoGeneratedIdElement.getAttribute("value");
				    
				    row.createCell(rowOfCellIndex).setCellValue(autoGeneratedId);
				    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
				    System.out.println(rowOfCellIndex);    
				}
				
			}
			
			@Test(priority=5,description="Validating Personal Details Page")
			public void validatingPersonalDetailsPageTest() throws IOException {
				
				for(int rowOfCellIndex=18;rowOfCellIndex<20;rowOfCellIndex++) {
					
					String expectedPersonalDeatilsPageText = row.getCell(rowOfCellIndex).getStringCellValue();
					
					System.out.println("The expected Personal Details Page Text "+expectedPersonalDeatilsPageText);
					
					rowOfCellIndex++;
					
					
					//<input class="formInputText" maxlength="30" type="text" name="firstName" id="firstName">
					//<input class="formInputText" maxlength="30" type="text" name="middleName" id="middleName">
					//<input class="formInputText" maxlength="30" type="text" name="lastName" id="lastName">
					
					//identifying first,middle,last TextBox Element 
					By firstNameElementProperty = By.id(properties.getProperty("loginWebPageFirstNameElementProperty"));
					By middleNameElementProperty = By.id(properties.getProperty("loginWebPageMiddleNameElementProperty"));
					By lastNameElementProperty = By.id(properties.getProperty("loginWebPageLastNameElementProperty"));
				    
					//finding first,middle,last TextBox Element
				    WebElement firstNameElement = driver.findElement(firstNameElementProperty);	
				    WebElement middleNameElement = driver.findElement(middleNameElementProperty);
				    WebElement lastNameElement = driver.findElement(lastNameElementProperty);
				    
				    //sending the first middle last name present in excel sheeet first middle last name elements
				    firstNameElement.sendKeys(sheetFirstName);
				    
				    middleNameElement.sendKeys(sheetMiddleName);
				    
				    lastNameElement.sendKeys(sheetLastName);
				    
				    //saving the details
				    By btnElementProperty = By.id("btnSave");
				    
				    //finding the save button element using id
				    WebElement btnElement = driver.findElement(btnElementProperty);
				    
				    //performing click operation on button element
				    
				    btnElement.click();
				    
				  //identifying by xpath property                ///html/body/div[1]/div[3]/div/div[1]/h1
				 // <h1>Personal Details</h1>
						
						By personalDetailsElementProperty = By.xpath(properties.getProperty("addEmployeePagePersonalDetailsHeading"));
						
						WebElement personalDetailsElement = driver.findElement(personalDetailsElementProperty);
						
					    String actualPersonalDeatilsPageText = personalDetailsElement.getText();
					    
					    System.out.println("The actual Personal Details Page Text is  "+actualPersonalDeatilsPageText);
					    
	                    row.createCell(rowOfCellIndex).setCellValue(actualPersonalDeatilsPageText);
					    
	                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
						
						rowOfCellIndex++;
					    
					    if(actualPersonalDeatilsPageText.contains(expectedPersonalDeatilsPageText))
					    {
					    	System.out.println("The expected personal details text exists "+actualPersonalDeatilsPageText);
					    	
					    	row.createCell(rowOfCellIndex).setCellValue("The expected personal details text exists-PASS");
					    	
					    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
							addEmployeeWorkBook.write(outputFile);
					    		
					    }
					    
					    else 
					    {
					    	System.out.println("The expected personal details text doesn't exist");
					    	
	                        row.createCell(rowOfCellIndex).setCellValue("The expected personal details text doesn't exist-FAIL");
					    	
					    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
							addEmployeeWorkBook.write(outputFile);
					    }				    
				}
			}
			
			@Test(priority=6,description="validating first middle last name and employee Id")
			public void fullNameEmployeeIdTest() throws IOException {
				
				for(int rowOfCellIndex=21;rowOfCellIndex<30;rowOfCellIndex++) {
					
//getting the values stored in first,middle,last name text box elements 
				    
				    String actualFirstName = driver.findElement(By.name(properties.getProperty("loginWebPageFirstNameOutputElementProperty"))).getAttribute("value");
				    
				    row.createCell(rowOfCellIndex).setCellValue(actualFirstName);
				    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
				    rowOfCellIndex++;
				    
				    if(sheetFirstName.equals(actualFirstName))
				    {
				    	
                        System.out.println("The expected first name matches");
				    	
				    	row.createCell(rowOfCellIndex).setCellValue("The expected first name matches-PASS");
				    	
				    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
				    	
				    }
				    
				    else {
				    	
				    	 System.out.println("The expected first name doesn't match");
					    	
					     row.createCell(rowOfCellIndex).setCellValue("The expected first name doesn't match-FAIL");
					    	
					     outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);
				    }

					rowOfCellIndex++;
					
                    String actualMiddleName = driver.findElement(By.name(properties.getProperty("loginWebPageMiddleNameOutputElementProperty"))).getAttribute("value");
				    
				    row.createCell(rowOfCellIndex).setCellValue(actualMiddleName);
				    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
				    rowOfCellIndex++;
				    
				    if(sheetMiddleName.equals(actualMiddleName))
				    {
				    	
                        System.out.println("The expected middle name matches "+actualMiddleName);
				    	
				    	row.createCell(rowOfCellIndex).setCellValue("The expected middle name matches-PASS");
				    	
				    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
				    }
				    
				    else {
				    	
				    	 System.out.println("The expected middle name doesn't match");
					    	
					     row.createCell(rowOfCellIndex).setCellValue("The expected middle name doesn't match-FAIL");
					    	
					     outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);	
				    }

					rowOfCellIndex++;

					
                    String actualLastName = driver.findElement(By.name(properties.getProperty("loginWebPageLastNameOutputElementProperty"))).getAttribute("value");
				    
				    row.createCell(rowOfCellIndex).setCellValue(actualLastName);
				    
                    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
					
					addEmployeeWorkBook.write(outputFile);
					
				    rowOfCellIndex++;
				    
				    if(sheetLastName.equals(actualLastName))
				    {
				    	
                        System.out.println("The expected last name matches");
				    	
				    	row.createCell(rowOfCellIndex).setCellValue("The expected last name matches-PASS");
				    	
				    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
				    	
				    	
				    }
				    
				    else {
				    	
				    	 System.out.println("The expected last name doesn't match");
					    	
					     row.createCell(rowOfCellIndex).setCellValue("The expected last name doesn't match-FAIL");
					    	
					     outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);
				    }
					
				    rowOfCellIndex++;
				    
				    By actualEmployeIdElementProperty = By.id(properties.getProperty("loginWebPageActualEmployeeIdElementProperty"));
				    
				    WebElement actualEmployeIdElement = driver.findElement(actualEmployeIdElementProperty);
				    
				    String actualEmployeeId = actualEmployeIdElement.getAttribute("value");
					
				    row.createCell(rowOfCellIndex).setCellValue(actualEmployeeId);
			    	
				    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
					addEmployeeWorkBook.write(outputFile);
			    	
					rowOfCellIndex++;
				    
					if(actualEmployeeId.equals(autoGeneratedId))
				    {
				    	
                        System.out.println("The expected employee id matches");
				    	
				    	row.createCell(rowOfCellIndex).setCellValue("The expected employee id matches-PASS");
				    	
				    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);
				    }
				    
				    else {
				    	
				    	 System.out.println("The expected employee id doesn't match");
					    	
					     row.createCell(rowOfCellIndex).setCellValue("The expected employee id doesn't match-FAIL");
					    	
					     outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);
				    }
					
					rowOfCellIndex++;
					
					//identifying by xpath property                ///html/body/div[1]/div[3]/div/div[1]/h1
					
					By actualNameElementProperty = By.xpath(properties.getProperty("addEmployeePageActualFullNameHeading"));
					
					WebElement actualNameElement = driver.findElement(actualNameElementProperty);
					
					String actualName = actualNameElement.getText();
					
					row.createCell(rowOfCellIndex).setCellValue(actualName);
			    	
				    outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
					addEmployeeWorkBook.write(outputFile);
			    	
					rowOfCellIndex++;
					
					if(actualName.contains(actualFirstName) || actualName.contains(actualMiddleName) || actualName.contains(actualLastName))
				    {
				    	
                        System.out.println("The expected  name exists");
				    	
				    	row.createCell(rowOfCellIndex).setCellValue("The expected  name exists-PASS");
				    	
				    	outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
						
						addEmployeeWorkBook.write(outputFile);	
				    }
				    
				    else {
				    	
				    	 System.out.println("The expected name doesn't exist");
					    	
					     row.createCell(rowOfCellIndex).setCellValue("The expected name doesn't exist-FAIL");
					    	
					     outputFile = new FileOutputStream("./src/com/OHRMAddEmployeeDataResultFiles/MultipleFunctionalitesAndPagesTestSheetResult.xlsx");
							
						 addEmployeeWorkBook.write(outputFile);	
				    }
						
				}	
			}
			
			@Test(priority=7,description="Testing the OrangeHRM logout functionality")
			public void homePageLogoutTest() {
				
				//finding the save button element using linkText
			    By welcomeAdminElementProperty = By.linkText(properties.getProperty("loginWebPageWelcomeAdminElementProperty"));
				
			    //finding the welcome admin element by id
				WebElement welcomeAdminElement = driver.findElement(welcomeAdminElementProperty);
				
				//performing click operation on welcome admin element
				welcomeAdminElement.click();

				WebDriverWait wait = new WebDriverWait(driver,10);
				
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(properties.getProperty("loginWebPageLogoutElementProperty"))));
				
				// identifying logout element
				By logoutElementLocator = By.linkText(properties.getProperty("loginWebPageLogoutElementProperty"));
				
				//finding logout element
				WebElement logoutElement = driver.findElement(logoutElementLocator);
				
				//performing click operation on logout element
				logoutElement.click();	
			}			
}